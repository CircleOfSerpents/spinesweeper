{"version":3,"sources":["engine/Cell.js","engine/GameState.js","engine/Game.js","engine/Board.js","client/components/GameCell/GameCell.tsx","client/components/GameBoard/GameBoard.tsx","client/components/GameTimer/GameTimer.tsx","client/App.tsx","client/reportWebVitals.js","client/components/CoopBoard/CoopBoard.tsx","index.tsx"],"names":["CellState","Object","defineProperty","exports","value","Cell","clickedStates","unclickedNonMineStates","flaggedStates","unclickedStates","mineStates","nonMineStates","Unclicked","Clicked","Flagged","Questioned","UnclickedMine","ClickedMine","FlaggedMine","QuestionedMine","this","_isClicked","_isMine","_isFlagged","_isQuestioned","prototype","get","enumerable","configurable","click","rightClick","set","isMine","GameState","deserializeGame","Game","_","require","Board_1","Cell_1","GameState_1","rows","columns","mines","_gameState","Idle","board","Board","cellIndex","Won","Lost","cloneDeep","json","instance","assign","row","column","cell","neighborOffsets","validateInputs","createInternalBoard","addMines","mineCount","cellState","getCellState","floodfill","explode","isFullyFlaggedCell","clickAllNeighbors","calculateMineCount","gameState","calculateGameState","cleanUpGameIfNecessary","getCell","includes","stateCounts","getStateCounts","Active","count","_this","getInBoundNeighbors","forEach","neighbor","getCellNumNeighborMines","isCellInBounds","map","isMineCell","filter","Boolean","length","getCellNumNeighborFlags","isFlaggedCell","Error","inBoundsNeighbors","offset","push","Array","numMines","maxMines","addedMines","getRandomInt","isUnclickedNonMineCell","concat","max","num","Math","floor","random","allCells","arr","GameCell","numNeighborMines","className","String","GameBoard","gameBoard","onCellClick","id","rowNumber","columnNumber","onClick","e","onContextMenu","useState","timer","setTimer","increment","clear","savedIncrement","useRef","savedClear","interval","tick","current","useEffect","setInterval","undefined","clearInterval","useTimer","document","addEventListener","event","preventDefault","App","game","setGame","clickedIndex","type","newGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","socket","io","on","emit","ReactDOM","render","StrictMode","path","element","getElementById"],"mappings":"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","file":"static/js/main.4a581f7a.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cell = exports.clickedStates = exports.unclickedNonMineStates = exports.flaggedStates = exports.unclickedStates = exports.mineStates = exports.nonMineStates = exports.CellState = void 0;\nvar CellState;\n(function (CellState) {\n    CellState[CellState[\"Unclicked\"] = 0] = \"Unclicked\";\n    CellState[CellState[\"Clicked\"] = 1] = \"Clicked\";\n    CellState[CellState[\"Flagged\"] = 2] = \"Flagged\";\n    CellState[CellState[\"Questioned\"] = 3] = \"Questioned\";\n    CellState[CellState[\"UnclickedMine\"] = 4] = \"UnclickedMine\";\n    CellState[CellState[\"ClickedMine\"] = 5] = \"ClickedMine\";\n    CellState[CellState[\"FlaggedMine\"] = 6] = \"FlaggedMine\";\n    CellState[CellState[\"QuestionedMine\"] = 7] = \"QuestionedMine\";\n    CellState[CellState[\"Invalid\"] = 8] = \"Invalid\";\n})(CellState = exports.CellState || (exports.CellState = {}));\nexports.nonMineStates = [CellState.Unclicked, CellState.Clicked, CellState.Flagged, CellState.Questioned];\nexports.mineStates = [\n    CellState.UnclickedMine,\n    CellState.ClickedMine,\n    CellState.FlaggedMine,\n    CellState.QuestionedMine,\n];\nexports.unclickedStates = [\n    CellState.Unclicked,\n    CellState.UnclickedMine,\n    CellState.Flagged,\n    CellState.FlaggedMine,\n    CellState.Questioned,\n    CellState.QuestionedMine,\n];\nexports.flaggedStates = [CellState.Flagged, CellState.FlaggedMine];\nexports.unclickedNonMineStates = [CellState.Unclicked, CellState.Flagged, CellState.Questioned];\nexports.clickedStates = [CellState.Clicked, CellState.ClickedMine];\nvar Cell = /** @class */ (function () {\n    function Cell() {\n        this._isClicked = false;\n        this._isMine = false;\n        this._isFlagged = false;\n        this._isQuestioned = false;\n    }\n    Object.defineProperty(Cell.prototype, \"cellState\", {\n        get: function () {\n            if (this._isClicked) {\n                if (this._isMine) {\n                    return CellState.ClickedMine;\n                }\n                else {\n                    return CellState.Clicked;\n                }\n            }\n            else {\n                if (this._isMine) {\n                    if (this._isFlagged) {\n                        return CellState.FlaggedMine;\n                    }\n                    else if (this._isQuestioned) {\n                        return CellState.QuestionedMine;\n                    }\n                    else {\n                        return CellState.UnclickedMine;\n                    }\n                }\n                else {\n                    if (this._isFlagged) {\n                        return CellState.Flagged;\n                    }\n                    else if (this._isQuestioned) {\n                        return CellState.Questioned;\n                    }\n                    else {\n                        return CellState.Unclicked;\n                    }\n                }\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Cell.prototype.click = function () {\n        if (this._isFlagged || this._isQuestioned)\n            return;\n        this._isClicked = true;\n    };\n    Cell.prototype.rightClick = function () {\n        if (this._isClicked)\n            return;\n        if (this._isFlagged) {\n            this._isFlagged = false;\n            this._isQuestioned = true;\n        }\n        else if (this._isQuestioned) {\n            this._isQuestioned = false;\n        }\n        else {\n            this._isFlagged = true;\n        }\n    };\n    Object.defineProperty(Cell.prototype, \"isMine\", {\n        set: function (isMine) {\n            this._isMine = isMine;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Cell;\n}());\nexports.Cell = Cell;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GameState = void 0;\nvar GameState;\n(function (GameState) {\n    GameState[GameState[\"Idle\"] = 0] = \"Idle\";\n    GameState[GameState[\"Active\"] = 1] = \"Active\";\n    GameState[GameState[\"Won\"] = 2] = \"Won\";\n    GameState[GameState[\"Lost\"] = 3] = \"Lost\";\n})(GameState = exports.GameState || (exports.GameState = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeGame = exports.Game = void 0;\nvar _ = require(\"lodash\");\nvar Board_1 = require(\"./Board\");\nvar Cell_1 = require(\"./Cell\");\nvar GameState_1 = require(\"./GameState\");\nvar Game = /** @class */ (function () {\n    function Game(rows, columns, mines) {\n        this._gameState = GameState_1.GameState.Idle;\n        this.board = new Board_1.Board(rows, columns, mines);\n    }\n    Object.defineProperty(Game.prototype, \"gameState\", {\n        get: function () {\n            return this._gameState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Perform left click actions (click and click neighbors) on the\n     * cell at cellIndex and return a deep copy of the game in its new state\n     * @param cellIndex the cell left clicked\n     * @returns a deep copy of the game in its new state\n     */\n    Game.prototype.click = function (cellIndex) {\n        if (this._gameState === GameState_1.GameState.Won || this._gameState === GameState_1.GameState.Lost) {\n            return this;\n        }\n        this._gameState = this.board.click(cellIndex);\n        return _.cloneDeep(this);\n    };\n    /**\n     * Perform right click actions (flag, question and click neighbors) on the\n     * cell at cellIndex and return a deep copy of the game in its new state\n     * @param cellIndex the cell right clicked\n     * @returns a deep copy of the game in its new state\n     */\n    Game.prototype.rightClick = function (cellIndex) {\n        if (this._gameState === GameState_1.GameState.Won || this._gameState === GameState_1.GameState.Lost) {\n            return this;\n        }\n        this._gameState = this.board.rightClick(cellIndex);\n        return _.cloneDeep(this);\n    };\n    return Game;\n}());\nexports.Game = Game;\nfunction deserializeGame(json) {\n    var instance = new Game(10, 10, 10); // NOTE: if your constructor checks for unpassed arguments, then just pass dummy ones to prevent throwing an error\n    Object.assign(instance, json);\n    for (var row = 0; row < instance.board.rows; row++) {\n        for (var column = 0; column < instance.board.columns; column++) {\n            var cell = new Cell_1.Cell();\n            Object.assign(cell, json.board.board[row][column]);\n            json.board.board[row][column] = cell;\n        }\n    }\n    instance.board = new Board_1.Board(10, 10, 10);\n    Object.assign(instance.board, json.board);\n    return instance;\n}\nexports.deserializeGame = deserializeGame;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Board = void 0;\nvar Cell_1 = require(\"./Cell\");\nvar GameState_1 = require(\"./GameState\");\nvar neighborOffsets = [\n    { row: 0, column: 1 },\n    { row: 1, column: 0 },\n    { row: 0, column: -1 },\n    { row: -1, column: 0 },\n    { row: 1, column: 1 },\n    { row: -1, column: -1 },\n    { row: 1, column: -1 },\n    { row: -1, column: 1 },\n];\nvar Board = /** @class */ (function () {\n    function Board(rows, columns, mines) {\n        this.validateInputs(rows, columns, mines);\n        this.rows = rows;\n        this.columns = columns;\n        this.mines = 0; // Initialize to 0 because we will increment as each mine is added\n        this.board = this.createInternalBoard(mines);\n        this.addMines(mines);\n        this.mineCount = this.mines;\n    }\n    /**\n     * Perform left click actions (click and click neighbors) on the\n     * cell at cellIndex and return the new GameState\n     * @param cellIndex the cell left clicked\n     * @returns the new GameState of the game after the action is complete\n     */\n    Board.prototype.click = function (cellIndex) {\n        var cellState = this.getCellState(cellIndex);\n        if (cellState === Cell_1.CellState.Unclicked) {\n            this.floodfill(cellIndex);\n        }\n        else if (cellState === Cell_1.CellState.UnclickedMine) {\n            this.explode();\n        }\n        else if (this.isFullyFlaggedCell(cellIndex)) {\n            this.clickAllNeighbors(cellIndex);\n        }\n        this.mineCount = this.calculateMineCount();\n        var gameState = this.calculateGameState();\n        this.cleanUpGameIfNecessary(gameState);\n        return gameState;\n    };\n    /**\n     * Perform right click actions (flag, question, click neighbors) on the\n     * cell at cellIndex and return the new GameState\n     * @param cellIndex the cell right clicked\n     * @returns the new GameState of the game after the action is complete\n     */\n    Board.prototype.rightClick = function (cellIndex) {\n        var cell = this.getCell(cellIndex);\n        if (Cell_1.unclickedStates.includes(cell.cellState)) {\n            cell.rightClick();\n        }\n        else if (this.isFullyFlaggedCell(cellIndex)) {\n            this.clickAllNeighbors(cellIndex);\n        }\n        this.mineCount = this.calculateMineCount();\n        var gameState = this.calculateGameState();\n        this.cleanUpGameIfNecessary(gameState);\n        return gameState;\n    };\n    /**\n     * Calculate the current GameState of the board\n     */\n    Board.prototype.calculateGameState = function () {\n        var stateCounts = this.getStateCounts();\n        if (!!stateCounts[Cell_1.CellState.ClickedMine]) {\n            return GameState_1.GameState.Lost;\n        }\n        else if ((stateCounts[Cell_1.CellState.Unclicked] || 0) +\n            (stateCounts[Cell_1.CellState.Flagged] || 0) +\n            (stateCounts[Cell_1.CellState.Questioned] || 0) ===\n            0) {\n            return GameState_1.GameState.Won;\n        }\n        return GameState_1.GameState.Active;\n    };\n    /**\n     * Calculate the mine count to display in the UI\n     * @returns A count of the total mines minus flagged cells\n     */\n    Board.prototype.calculateMineCount = function () {\n        var count = this.mines;\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                if (Cell_1.flaggedStates.includes(this.getCellState({ row: row, column: column }))) {\n                    count -= 1;\n                }\n            }\n        }\n        return count;\n    };\n    /**\n     * Get a map of counts of CellState for every cell on the board\n     */\n    Board.prototype.getStateCounts = function () {\n        var stateCounts = {};\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                var cellState = this.getCellState({ row: row, column: column });\n                stateCounts[cellState] = (stateCounts[cellState] || 0) + 1;\n            }\n        }\n        return stateCounts;\n    };\n    /**\n     * Perform a left click on all neighbors of the cell at cellIndex\n     */\n    Board.prototype.clickAllNeighbors = function (cellIndex) {\n        var _this = this;\n        this.getInBoundNeighbors(cellIndex).forEach(function (neighbor) {\n            if (_this.getCellState(neighbor) === Cell_1.CellState.UnclickedMine) {\n                _this.explode();\n            }\n            else {\n                _this.floodfill(neighbor);\n            }\n        });\n    };\n    /**\n     * Calculate the count of the number of adjacent mines in the 8 neighbors of the cell at board[row][column]\n     * @param row the row of the cell\n     * @param column the column of the cell\n     * @returns a count of neighbors containing mines\n     */\n    Board.prototype.getCellNumNeighborMines = function (cellIndex) {\n        var _this = this;\n        if (!this.isCellInBounds(cellIndex))\n            return 0;\n        return this.getInBoundNeighbors(cellIndex)\n            .map(function (neighbor) { return _this.isMineCell(neighbor); })\n            .filter(Boolean).length;\n    };\n    /**\n     * Calculate the count of the number of adjacent flagged cells in the 8 neighbors of the cell at board[row][column]\n     * @param row the row of the cell\n     * @param column the column of the cell\n     * @returns a count of flagged neighbors\n     */\n    Board.prototype.getCellNumNeighborFlags = function (cellIndex) {\n        var _this = this;\n        if (!this.isCellInBounds(cellIndex))\n            return 0;\n        return this.getInBoundNeighbors(cellIndex)\n            .map(function (neighbor) { return _this.isFlaggedCell(neighbor); })\n            .filter(Boolean).length;\n    };\n    /**\n     * Get the current Cell at board[row][column]\n     * @param row the row of the cell\n     * @param column the column of the cell\n     * @returns the Cell at board[row][column]\n     */\n    Board.prototype.getCell = function (cellIndex) {\n        if (!this.isCellInBounds(cellIndex)) {\n            throw Error(\"Cell out of bounds\");\n        }\n        return this.board[cellIndex.row][cellIndex.column];\n    };\n    /**\n     * Get the current CellState for the cell at board[row][column]\n     * @param row the row of the cell\n     * @param column the column of the cell\n     * @returns the current CellState for the cell at board[row][column]\n     */\n    Board.prototype.getCellState = function (cellIndex) {\n        if (!this.isCellInBounds(cellIndex)) {\n            throw Error(\"Cell out of bounds\");\n        }\n        return this.board[cellIndex.row][cellIndex.column].cellState;\n    };\n    /**\n     * Depth first search floodfill of open unclicked areas\n     */\n    Board.prototype.floodfill = function (cellIndex) {\n        var _this = this;\n        var cellState = this.getCellState(cellIndex);\n        if (cellState === Cell_1.CellState.Unclicked) {\n            this.getCell(cellIndex).click();\n            if (this.getCellNumNeighborMines(cellIndex) === 0) {\n                this.getInBoundNeighbors(cellIndex).forEach(function (neighbor) {\n                    _this.floodfill(neighbor);\n                });\n            }\n        }\n    };\n    /**\n     * Mark all bombs as clicked\n     */\n    Board.prototype.explode = function () {\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                if (this.isMineCell({ row: row, column: column })) {\n                    this.board[row][column].click();\n                }\n            }\n        }\n    };\n    /**\n     * Get all neighbors of the cell at cellIndex that are in the board\n     */\n    Board.prototype.getInBoundNeighbors = function (cellIndex) {\n        var _this = this;\n        var inBoundsNeighbors = [];\n        neighborOffsets.forEach(function (offset) {\n            var neighbor = { row: cellIndex.row + offset.row, column: cellIndex.column + offset.column };\n            if (_this.isCellInBounds(neighbor)) {\n                inBoundsNeighbors.push(neighbor);\n            }\n        });\n        return inBoundsNeighbors;\n    };\n    /**\n     * Return true if the cell at cellIndex is in board\n     */\n    Board.prototype.isCellInBounds = function (cellIndex) {\n        if (cellIndex.row < 0 || cellIndex.row >= this.rows)\n            return false;\n        if (cellIndex.column < 0 || cellIndex.column >= this.columns)\n            return false;\n        return true;\n    };\n    /**\n     * Instantiate the internal Board object for storing board state\n     */\n    Board.prototype.createInternalBoard = function (mines) {\n        var board = Array(this.rows);\n        for (var row = 0; row < this.rows; row++) {\n            board[row] = Array(this.columns);\n            for (var column = 0; column < this.columns; column++) {\n                board[row][column] = new Cell_1.Cell();\n            }\n        }\n        return board;\n    };\n    /**\n     * Add numMines mines to the game board without exceeding the maximum\n     */\n    Board.prototype.addMines = function (numMines) {\n        var maxMines = (this.rows * this.columns) / 2;\n        var addedMines = 0;\n        while (addedMines < numMines && this.mines < maxMines) {\n            var row = this.getRandomInt(this.rows);\n            var column = this.getRandomInt(this.columns);\n            if (this.isUnclickedNonMineCell({ row: row, column: column })) {\n                this.board[row][column].isMine = true;\n                addedMines++;\n                this.mines++;\n            }\n        }\n    };\n    Board.prototype.isMineCell = function (cellIndex) {\n        return Cell_1.mineStates.includes(this.getCellState(cellIndex));\n    };\n    Board.prototype.isUnclickedNonMineCell = function (cellIndex) {\n        return Cell_1.unclickedNonMineStates.includes(this.getCellState(cellIndex));\n    };\n    Board.prototype.isFlaggedCell = function (cellIndex) {\n        return Cell_1.flaggedStates.includes(this.getCellState(cellIndex));\n    };\n    Board.prototype.isFullyFlaggedCell = function (cellIndex) {\n        return (this.getCellState(cellIndex) === Cell_1.CellState.Clicked &&\n            this.getCellNumNeighborFlags(cellIndex) === this.getCellNumNeighborMines(cellIndex));\n    };\n    /**\n     * Flags all mines at the end of a winning game\n     * @param gameState the current GameState\n     */\n    Board.prototype.cleanUpGameIfNecessary = function (gameState) {\n        if (gameState === GameState_1.GameState.Won) {\n            for (var row = 0; row < this.rows; row++) {\n                for (var column = 0; column < this.columns; column++) {\n                    if (this.getCellState({ row: row, column: column }) === Cell_1.CellState.QuestionedMine) {\n                        this.rightClick({ row: row, column: column });\n                    }\n                    if (this.getCellState({ row: row, column: column }) === Cell_1.CellState.UnclickedMine) {\n                        this.rightClick({ row: row, column: column });\n                    }\n                }\n            }\n        }\n    };\n    Board.prototype.validateInputs = function (rows, columns, mines) {\n        var maxMines = (rows * columns) / 2;\n        if (mines < 0 || mines > maxMines) {\n            throw Error(\"Please provide a number of mines between 0 and \".concat(maxMines));\n        }\n        if (rows <= 0 || rows > 100) {\n            throw Error(\"Please provide a number of rows between 1 and 100\");\n        }\n        if (columns <= 0 || columns > 100) {\n            throw Error(\"Please provide a number of columns between 1 and 100\");\n        }\n    };\n    Board.prototype.getRandomInt = function (max) {\n        var num = Math.floor(Math.random() * max);\n        if (num > max) {\n            return max;\n        }\n        return num;\n    };\n    Board.prototype.allCells = function () {\n        var arr = [];\n        for (var row = 0; row < this.rows; row++) {\n            arr = arr.concat(this.board[row]);\n        }\n        return arr;\n    };\n    return Board;\n}());\nexports.Board = Board;\n","import \"./GameCell.css\";\nimport { CellState, unclickedStates } from \"../../../engine/Cell\";\n\ntype GameCellProps = {\n  cellState: CellState;\n  numNeighborMines: number;\n};\n\nfunction GameCell({ cellState, numNeighborMines }: GameCellProps) {\n  const getContent = (): string => {\n    if (cellState === CellState.Clicked) {\n      if (numNeighborMines > 0) {\n        return String(numNeighborMines);\n      }\n    }\n    if (cellState === CellState.ClickedMine) {\n      return \"💣\";\n    }\n    if (cellState === CellState.Flagged || cellState === CellState.FlaggedMine) {\n      return \"🚩\";\n    }\n    if (cellState === CellState.Questioned || cellState === CellState.QuestionedMine) {\n      return \"❓\";\n    }\n    return \"\";\n  };\n\n  const getClass = (): string => {\n    if (unclickedStates.includes(cellState)) {\n      return \"unclicked\";\n    } else if (cellState === CellState.Clicked) {\n      return \"clicked\";\n    } else if (cellState === CellState.ClickedMine) {\n      return \"clicked-mine\";\n    }\n\n    return \"\";\n  };\n\n  return <div className={`GameCell ${getClass()}`}>{getContent()}</div>;\n}\n\nexport default GameCell;\n","import \"./GameBoard.css\";\nimport { Board, CellIndex } from \"../../../engine/Board\";\nimport { Cell } from \"../../../engine/Cell\";\nimport GameCell from \"../GameCell/GameCell\";\n\ntype GameBoardProps = {\n  gameBoard: Board;\n  onCellClick: (e: React.MouseEvent<HTMLDivElement>, cellIndex: CellIndex) => void;\n};\n\nfunction GameBoard({ gameBoard, onCellClick }: GameBoardProps) {\n  return (\n    <div className=\"GameBoard\" id=\"game-board\" data-testid=\"game-board\">\n      {gameBoard.board.map((row: Cell[], rowNumber: number) => (\n        <div className=\"Row\" key={rowNumber}>\n          {row.map((cell: Cell, columnNumber: number) => (\n            <div\n              className=\"Cell\"\n              key={columnNumber}\n              onClick={(e: React.MouseEvent<HTMLDivElement>) =>\n                onCellClick(e, { row: rowNumber, column: columnNumber })\n              }\n              onContextMenu={(e: React.MouseEvent<HTMLDivElement>) =>\n                onCellClick(e, { row: rowNumber, column: columnNumber })\n              }\n            >\n              {\n                <GameCell\n                  cellState={gameBoard.getCellState({ row: rowNumber, column: columnNumber })}\n                  numNeighborMines={gameBoard.getCellNumNeighborMines({ row: rowNumber, column: columnNumber })}\n                />\n              }\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import \"./GameTimer.css\";\nimport { GameState } from \"../../../engine/GameState\";\nimport { useEffect, useRef, useState } from \"react\";\n\ntype GameTimerProps = {\n  gameState: GameState;\n};\n\n/**\n * An effect used to keep and update state for the game timer\n * @param increment callback to increment the timer\n * @param clear callback to reset the counter to zero\n * @param gameState the current GameState\n */\nfunction useTimer(increment: Function, clear: Function, gameState: GameState) {\n  const savedIncrement = useRef<Function>();\n  const savedClear = useRef<Function>();\n  let interval = useRef<NodeJS.Timer>();\n\n  function tick() {\n    savedIncrement.current && savedIncrement.current();\n  }\n\n  useEffect(() => {\n    savedIncrement.current = increment;\n    savedClear.current = clear;\n  });\n\n  useEffect(() => {\n    if (gameState === GameState.Active) {\n      interval.current = setInterval(tick, 1000);\n    } else if (\n      (gameState === GameState.Lost || gameState === GameState.Won || gameState === GameState.Idle) &&\n      interval.current !== undefined\n    ) {\n      clearInterval(interval.current);\n      if (gameState === GameState.Idle) {\n        savedClear.current && savedClear.current(0); // Going Idle implies the game was reset\n      }\n    }\n  }, [gameState]);\n}\n\nfunction GameCell({ gameState }: GameTimerProps) {\n  const [timer, setTimer] = useState(0);\n\n  useTimer(\n    () => setTimer(timer + 1),\n    () => setTimer(0),\n    gameState\n  );\n\n  return <div>{timer}</div>;\n}\n\nexport default GameCell;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { CellIndex } from \"../engine/Board\";\nimport { Game } from \"../engine/Game\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameTimer from \"./components/GameTimer/GameTimer\";\n\ndocument.addEventListener(\"contextmenu\", (event) => {\n  event.preventDefault();\n});\n\nfunction App() {\n  const rows = 20;\n  const columns = 20;\n  const mines = 50;\n\n  const [game, setGame] = useState(new Game(rows, columns, mines));\n\n  let onCellClick = (e: React.MouseEvent<HTMLDivElement>, clickedIndex: CellIndex) => {\n    if (e.type === \"click\") {\n      const newGame = game.click(clickedIndex);\n      setGame(newGame);\n    } else if (e.type === \"contextmenu\") {\n      const newGame = game.rightClick(clickedIndex);\n      setGame(newGame);\n    }\n  };\n\n  let reset = () => {\n    setGame(new Game(rows, columns, mines));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={reset}>Reset</button>\n        <div className=\"header-numbers\">\n          <GameTimer gameState={game.gameState} />\n          {game.board.mineCount}\n        </div>\n        <GameBoard gameBoard={game.board} onCellClick={onCellClick} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useRef, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\n\nimport \"./CoopBoard.css\";\n\nimport GameBoard from \"../GameBoard/GameBoard\";\nimport GameTimer from \"../GameTimer/GameTimer\";\nimport { CellIndex } from \"../../../engine/Board\";\nimport { deserializeGame, Game } from \"../../../engine/Game\";\n\ndocument.addEventListener(\"contextmenu\", (event) => {\n  event.preventDefault();\n});\n\nfunction App() {\n  const socket = useRef<Socket>();\n\n  useEffect(() => {\n    socket.current = io();\n    socket.current.on(\"setGame\", (game) => {\n      setGame(deserializeGame(game));\n    });\n  }, []);\n\n  const [game, setGame] = useState<Game>();\n\n  let onCellClick = (e: React.MouseEvent<HTMLDivElement>, clickedIndex: CellIndex) => {\n    if (e.type === \"click\") {\n      socket.current && socket.current.emit(\"click\", clickedIndex);\n    } else if (e.type === \"contextmenu\") {\n      socket.current && socket.current.emit(\"rightClick\", clickedIndex);\n    }\n  };\n\n  let reset = () => {\n    socket.current && socket.current.emit(\"resetGame\");\n  };\n\n  return (\n    <div className=\"App\">\n      {!!game && (\n        <header className=\"App-header\">\n          <button onClick={reset}>Reset</button>\n\n          <div className=\"header-numbers\">\n            <GameTimer gameState={game.gameState} />\n            {game.board.mineCount}\n          </div>\n          <GameBoard gameBoard={game.board} onCellClick={onCellClick} />\n        </header>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport \"./client/index.css\";\nimport App from \"./client/App\";\nimport reportWebVitals from \"./client/reportWebVitals\";\nimport CoopBoard from \"./client/components/CoopBoard/CoopBoard\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"coop\" element={<CoopBoard />} />\n      </Routes>\n    </BrowserRouter>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}