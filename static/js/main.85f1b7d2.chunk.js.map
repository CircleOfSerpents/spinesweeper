{"version":3,"sources":["engine/Cell.ts","engine/Board.ts","GameCell/GameCell.tsx","GameBoard/GameBoard.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CellState","nonMineStates","Unclicked","Clicked","Flagged","Questioned","mineStates","UnclickedMine","ClickedMine","FlaggedMine","QuestionedMine","unclickedStates","unclickedNonMineStates","clickedStates","Cell","_isClicked","_isMine","_isFlagged","_isQuestioned","this","isMine","neighborOffsets","row","column","Board","rows","columns","mines","board","validateInputs","createInternalBoard","addMines","cellIndex","cellState","getCellState","includes","floodfill","explode","_","cloneDeep","getCell","rightClick","isCellInBounds","getInBoundNeighbors","map","neighbor","isMineCell","filter","Boolean","length","Error","click","getCellNumNeighborMines","forEach","inBoundsNeighbors","offset","push","Array","maxMines","addedMines","getRandomInt","isUnclickedNonMineCell","max","Math","floor","random","GameCell","numNeighborMines","className","String","GameBoard","gameBoard","onCellClick","id","rowNumber","cell","columnNumber","onClick","e","onContextMenu","document","addEventListener","event","preventDefault","App","useState","setGameBoard","clickedIndex","type","newBoard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85f1b7d2.chunk.js","sourcesContent":["export enum CellState {\n  Unclicked,\n  Clicked,\n  Flagged,\n  Questioned,\n  UnclickedMine,\n  ClickedMine,\n  FlaggedMine,\n  QuestionedMine,\n  Invalid,\n}\n\nexport const nonMineStates = [CellState.Unclicked, CellState.Clicked, CellState.Flagged, CellState.Questioned];\nexport const mineStates = [\n  CellState.UnclickedMine,\n  CellState.ClickedMine,\n  CellState.FlaggedMine,\n  CellState.QuestionedMine,\n];\nexport const unclickedStates = [\n  CellState.Unclicked,\n  CellState.UnclickedMine,\n  CellState.Flagged,\n  CellState.FlaggedMine,\n  CellState.Questioned,\n  CellState.QuestionedMine,\n];\nexport const unclickedNonMineStates = [CellState.Unclicked, CellState.Flagged, CellState.Questioned];\nexport const clickedStates = [CellState.Clicked, CellState.ClickedMine];\n\nexport default class Cell {\n  private _isClicked: boolean = false;\n  private _isMine: boolean = false;\n  private _isFlagged: boolean = false;\n  private _isQuestioned: boolean = false;\n\n  public get cellState(): CellState {\n    if (this._isClicked) {\n      if (this._isMine) {\n        return CellState.ClickedMine;\n      } else {\n        return CellState.Clicked;\n      }\n    } else {\n      if (this._isMine) {\n        if (this._isFlagged) {\n          return CellState.FlaggedMine;\n        } else if (this._isQuestioned) {\n          return CellState.QuestionedMine;\n        } else {\n          return CellState.UnclickedMine;\n        }\n      } else {\n        if (this._isFlagged) {\n          return CellState.Flagged;\n        } else if (this._isQuestioned) {\n          return CellState.Questioned;\n        } else {\n          return CellState.Unclicked;\n        }\n      }\n    }\n  }\n\n  public click() {\n    if (this._isFlagged || this._isQuestioned) return;\n    this._isClicked = true;\n  }\n\n  public rightClick() {\n    if (this._isClicked) return;\n    if (this._isFlagged) {\n      this._isFlagged = false;\n      this._isQuestioned = true;\n    } else if (this._isQuestioned) {\n      this._isQuestioned = false;\n    } else {\n      this._isFlagged = true;\n    }\n  }\n\n  public set isMine(isMine: boolean) {\n    this._isMine = isMine;\n  }\n}\n","import _ from \"lodash\";\nimport Cell, { CellState, clickedStates, mineStates, nonMineStates, unclickedNonMineStates } from \"./Cell\";\n\nconst neighborOffsets = [\n  { row: 0, column: 1 },\n  { row: 1, column: 0 },\n  { row: 0, column: -1 },\n  { row: -1, column: 0 },\n  { row: 1, column: 1 },\n  { row: -1, column: -1 },\n  { row: 1, column: -1 },\n  { row: -1, column: 1 },\n];\n\nexport type CellIndex = {\n  row: number;\n  column: number;\n};\n\nexport default class Board {\n  public rows: number;\n  public columns: number;\n  public mines: number;\n  public board: Cell[][];\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.validateInputs(rows, columns, mines);\n    this.rows = rows;\n    this.columns = columns;\n    this.mines = 0; // Initialize to 0 because we will increment as each mine is added\n    this.board = this.createInternalBoard(mines);\n    this.addMines(mines);\n  }\n\n  public size(): number {\n    return this.rows * this.columns;\n  }\n\n  public click(cellIndex: CellIndex): Board {\n    let cellState = this.getCellState(cellIndex);\n    if (clickedStates.includes(cellState)) return this;\n    if (cellState === CellState.Unclicked) {\n      this.floodfill(cellIndex);\n    }\n    if (cellState === CellState.UnclickedMine) {\n      this.explode();\n      return _.cloneDeep(this);\n    }\n    return _.cloneDeep(this);\n  }\n\n  public rightClick(cellIndex: CellIndex): Board {\n    let cell = this.getCell(cellIndex);\n    cell.rightClick();\n    return _.cloneDeep(this);\n  }\n\n  /**\n   * Calculate the count of the number of adjacent mines in the 8 neighbors of the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns a count of neighbors containing mines\n   */\n  public getCellNumNeighborMines(cellIndex: CellIndex): number {\n    if (!this.isCellInBounds(cellIndex)) return 0;\n    return this.getInBoundNeighbors(cellIndex)\n      .map((neighbor) => this.isMineCell(neighbor))\n      .filter(Boolean).length;\n  }\n\n  /**\n   * Get the current Cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the Cell at board[row][column]\n   */\n  public getCell(cellIndex: CellIndex): Cell {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column];\n  }\n\n  /**\n   * Get the current CellState for the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the current CellState for the cell at board[row][column]\n   */\n  public getCellState(cellIndex: CellIndex): CellState {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column].cellState;\n  }\n\n  /**\n   * Depth first search floodfill of open unclicked areas\n   */\n  protected floodfill(cellIndex: CellIndex) {\n    let cellState = this.getCellState(cellIndex);\n    if (cellState === CellState.Unclicked) {\n      this.board[cellIndex.row][cellIndex.column].click();\n      if (this.getCellNumNeighborMines(cellIndex) === 0) {\n        this.getInBoundNeighbors(cellIndex).forEach((neighbor) => {\n          this.floodfill(neighbor);\n        });\n      }\n    }\n  }\n\n  /**\n   * Mark all bombs as clicked\n   */\n  protected explode() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        if (this.isMineCell({ row, column })) {\n          this.board[row][column].click();\n        }\n      }\n    }\n  }\n\n  protected getInBoundNeighbors(cellIndex: CellIndex): CellIndex[] {\n    let inBoundsNeighbors: CellIndex[] = [];\n    neighborOffsets.forEach((offset) => {\n      let neighbor: CellIndex = { row: cellIndex.row + offset.row, column: cellIndex.column + offset.column };\n      if (this.isCellInBounds(neighbor)) {\n        inBoundsNeighbors.push(neighbor);\n      }\n    });\n    return inBoundsNeighbors;\n  }\n\n  protected isCellInBounds(cellIndex: CellIndex): boolean {\n    if (cellIndex.row < 0 || cellIndex.row >= this.rows) return false;\n    if (cellIndex.column < 0 || cellIndex.column >= this.columns) return false;\n    return true;\n  }\n\n  protected createInternalBoard(mines: number): Cell[][] {\n    let board = Array(this.rows);\n    for (let row = 0; row < this.rows; row++) {\n      board[row] = Array(this.columns);\n      for (let column = 0; column < this.columns; column++) {\n        board[row][column] = new Cell();\n      }\n    }\n    return board;\n  }\n\n  protected addMines(mines: number) {\n    const maxMines = (this.rows * this.columns) / 2;\n    let addedMines = 0;\n    while (addedMines < mines && this.mines < maxMines) {\n      let row = this.getRandomInt(this.rows);\n      let column = this.getRandomInt(this.columns);\n      if (this.isUnclickedNonMineCell({ row, column })) {\n        this.board[row][column].isMine = true;\n        addedMines++;\n        this.mines++;\n      }\n    }\n  }\n\n  protected isMineCell(cellIndex: CellIndex) {\n    return mineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isUnclickedNonMineCell(cellIndex: CellIndex) {\n    return unclickedNonMineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isNonMineCell(cellIndex: CellIndex) {\n    return nonMineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected validateInputs(rows: number, columns: number, mines: number): void {\n    const maxMines = (rows * columns) / 2;\n    if (mines < 0 || mines > maxMines) {\n      throw Error(`Please provide a number of mines between 0 and ${maxMines}`);\n    }\n    if (rows <= 0 || rows > 100) {\n      throw Error(\"Please provide a number of rows between 1 and 100\");\n    }\n    if (columns <= 0 || columns > 100) {\n      throw Error(\"Please provide a number of columns between 1 and 100\");\n    }\n  }\n\n  protected getRandomInt(max: number) {\n    return Math.floor(Math.random() * (max - 1));\n  }\n}\n","import \"./GameCell.css\";\nimport {CellState, unclickedStates} from \"../engine/Cell\"\n\ntype GameCellProps = {\n  cellState: CellState;\n  numNeighborMines: number;\n};\n\nfunction GameCell({cellState, numNeighborMines}: GameCellProps) {\n  const getContent = (): string => {\n    if (cellState === CellState.Clicked) {\n      if (numNeighborMines > 0){\n        return String(numNeighborMines)\n      }\n    }\n    if (cellState === CellState.ClickedMine) {\n      return \"💣\"\n    }\n    if (cellState === CellState.Flagged || cellState === CellState.FlaggedMine) {\n      return \"🚩\"\n    }\n    if (cellState === CellState.Questioned || cellState === CellState.QuestionedMine) {\n      return \"❓\"\n    }\n    return \"\"\n  }\n\n  const getClass = (): string => {\n    if (unclickedStates.includes(cellState)){\n      return \"unclicked\"\n    } else if (cellState === CellState.Clicked) {\n      return \"clicked\"\n    } else if (cellState === CellState.ClickedMine) {\n      return \"clicked-mine\"\n    }\n\n    return \"\"\n  }\n\n  return <div className={`GameCell ${getClass()}`}>\n    {getContent()}\n  </div>\n}\n\nexport default GameCell;\n","import \"./GameBoard.css\";\nimport Board, { CellIndex } from \"../engine/Board\";\nimport Cell from \"../engine/Cell\"\nimport GameCell from \"../GameCell/GameCell\";\n\ntype GameBoardProps = {\n  gameBoard: Board;\n  onCellClick: (e: React.MouseEvent<HTMLDivElement>, cellIndex: CellIndex) => void;\n};\n\n\nfunction GameBoard({ gameBoard, onCellClick }: GameBoardProps) {\n  return <div className=\"GameBoard\" id=\"board\">\n    {gameBoard.board.map((row: Cell[], rowNumber: number) => (\n      <div className=\"Row\" key={rowNumber}>\n        {row.map((cell: Cell, columnNumber: number) => (\n          <div className=\"Cell\" key={columnNumber} \n            onClick={(e: React.MouseEvent<HTMLDivElement>) => onCellClick(e, {row: rowNumber, column: columnNumber})}\n            onContextMenu={(e: React.MouseEvent<HTMLDivElement>) => onCellClick(e, {row: rowNumber, column: columnNumber})}\n          >\n            {<GameCell \n            cellState={gameBoard.getCellState({row: rowNumber, column: columnNumber})}\n            numNeighborMines={gameBoard.getCellNumNeighborMines({row: rowNumber, column: columnNumber})}/>}\n          </div>\n        ))}\n      </div>\n    ))}\n  </div>\n}\n\nexport default GameBoard;\n","import './App.css';\nimport Board, { CellIndex } from \"./engine/Board\";\nimport GameBoard from \"./GameBoard/GameBoard\"\nimport { useState } from 'react';\n\ndocument.addEventListener(\"contextmenu\", (event) => {\n    event.preventDefault();\n});\n\nfunction App() {\n  const [gameBoard, setGameBoard] = useState(new Board(20, 20, 50));\n\n  let onCellClick = (e: React.MouseEvent<HTMLDivElement>, clickedIndex: CellIndex) => {\n    if (e.type === \"click\"){\n      const newBoard = gameBoard.click(clickedIndex)\n      setGameBoard(newBoard)\n    } else if (e.type === \"contextmenu\") {\n      e.preventDefault()\n      const newBoard = gameBoard.rightClick(clickedIndex)\n      setGameBoard(newBoard)\n    }\n\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GameBoard gameBoard={gameBoard} onCellClick={onCellClick}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}