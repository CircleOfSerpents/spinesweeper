{"version":3,"sources":["engine/Cell.ts","engine/GameState.ts","engine/Board.ts","engine/Game.ts","client/components/GameCell/GameCell.tsx","client/components/GameBoard/GameBoard.tsx","client/components/GameTimer/GameTimer.tsx","client/App.tsx","client/reportWebVitals.js","client/components/CoopBoard/CoopBoard.tsx","index.tsx"],"names":["CellState","Unclicked","Clicked","Flagged","Questioned","GameState","mineStates","UnclickedMine","ClickedMine","FlaggedMine","QuestionedMine","unclickedStates","flaggedStates","unclickedNonMineStates","Cell","_isClicked","_isMine","_isFlagged","_isQuestioned","this","isMine","neighborOffsets","row","column","Board","rows","columns","mines","mineCount","board","validateInputs","createInternalBoard","addMines","cellIndex","cellState","getCellState","floodfill","explode","isFullyFlaggedCell","clickAllNeighbors","calculateMineCount","gameState","calculateGameState","cleanUpGameIfNecessary","cell","getCell","includes","rightClick","stateCounts","getStateCounts","Lost","Won","Active","count","getInBoundNeighbors","forEach","neighbor","isCellInBounds","map","isMineCell","filter","Boolean","length","isFlaggedCell","Error","click","getCellNumNeighborMines","inBoundsNeighbors","offset","push","Array","numMines","maxMines","addedMines","getRandomInt","isUnclickedNonMineCell","getCellNumNeighborFlags","max","num","Math","floor","random","arr","concat","Game","_gameState","Idle","_","GameCell","numNeighborMines","className","String","GameBoard","gameBoard","onCellClick","id","rowNumber","columnNumber","onClick","e","onContextMenu","useState","timer","setTimer","increment","clear","savedIncrement","useRef","savedClear","interval","tick","current","useEffect","setInterval","undefined","clearInterval","useTimer","document","addEventListener","event","preventDefault","App","game","setGame","clickedIndex","type","newGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","socket","io","on","json","instance","Object","assign","deserializeGame","emit","ReactDOM","render","StrictMode","path","element","getElementById"],"mappings":"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","file":"static/js/main.cca4ec2d.chunk.js","sourcesContent":["export enum CellState {\n  Unclicked,\n  Clicked,\n  Flagged,\n  Questioned,\n  UnclickedMine,\n  ClickedMine,\n  FlaggedMine,\n  QuestionedMine,\n  Invalid,\n}\n\nexport const nonMineStates = [CellState.Unclicked, CellState.Clicked, CellState.Flagged, CellState.Questioned];\nexport const mineStates = [\n  CellState.UnclickedMine,\n  CellState.ClickedMine,\n  CellState.FlaggedMine,\n  CellState.QuestionedMine,\n];\nexport const unclickedStates = [\n  CellState.Unclicked,\n  CellState.UnclickedMine,\n  CellState.Flagged,\n  CellState.FlaggedMine,\n  CellState.Questioned,\n  CellState.QuestionedMine,\n];\nexport const flaggedStates = [CellState.Flagged, CellState.FlaggedMine];\nexport const unclickedNonMineStates = [CellState.Unclicked, CellState.Flagged, CellState.Questioned];\nexport const clickedStates = [CellState.Clicked, CellState.ClickedMine];\n\nexport class Cell {\n  private _isClicked: boolean = false;\n  private _isMine: boolean = false;\n  private _isFlagged: boolean = false;\n  private _isQuestioned: boolean = false;\n\n  public get cellState(): CellState {\n    if (this._isClicked) {\n      if (this._isMine) {\n        return CellState.ClickedMine;\n      } else {\n        return CellState.Clicked;\n      }\n    } else {\n      if (this._isMine) {\n        if (this._isFlagged) {\n          return CellState.FlaggedMine;\n        } else if (this._isQuestioned) {\n          return CellState.QuestionedMine;\n        } else {\n          return CellState.UnclickedMine;\n        }\n      } else {\n        if (this._isFlagged) {\n          return CellState.Flagged;\n        } else if (this._isQuestioned) {\n          return CellState.Questioned;\n        } else {\n          return CellState.Unclicked;\n        }\n      }\n    }\n  }\n\n  public click() {\n    if (this._isFlagged || this._isQuestioned) return;\n    this._isClicked = true;\n  }\n\n  public rightClick() {\n    if (this._isClicked) return;\n    if (this._isFlagged) {\n      this._isFlagged = false;\n      this._isQuestioned = true;\n    } else if (this._isQuestioned) {\n      this._isQuestioned = false;\n    } else {\n      this._isFlagged = true;\n    }\n  }\n\n  public set isMine(isMine: boolean) {\n    this._isMine = isMine;\n  }\n}\n","export enum GameState {\n  Idle,\n  Active,\n  Won,\n  Lost,\n}\n","import { Cell, CellState, flaggedStates, mineStates, unclickedNonMineStates, unclickedStates } from \"./Cell\";\nimport { GameState } from \"./GameState\";\n\nconst neighborOffsets = [\n  { row: 0, column: 1 },\n  { row: 1, column: 0 },\n  { row: 0, column: -1 },\n  { row: -1, column: 0 },\n  { row: 1, column: 1 },\n  { row: -1, column: -1 },\n  { row: 1, column: -1 },\n  { row: -1, column: 1 },\n];\n\nexport type CellIndex = {\n  row: number;\n  column: number;\n};\n\nexport class Board {\n  public rows: number;\n  public columns: number;\n  protected mines: number;\n  public mineCount: number; // used for mine display in UI\n  public board: Cell[][];\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.validateInputs(rows, columns, mines);\n    this.rows = rows;\n    this.columns = columns;\n    this.mines = 0; // Initialize to 0 because we will increment as each mine is added\n    this.board = this.createInternalBoard(mines);\n    this.addMines(mines);\n    this.mineCount = this.mines;\n  }\n\n  /**\n   * Perform left click actions (click and click neighbors) on the\n   * cell at cellIndex and return the new GameState\n   * @param cellIndex the cell left clicked\n   * @returns the new GameState of the game after the action is complete\n   */\n  public click(cellIndex: CellIndex): GameState {\n    let cellState = this.getCellState(cellIndex);\n    if (cellState === CellState.Unclicked) {\n      this.floodfill(cellIndex);\n    } else if (cellState === CellState.UnclickedMine) {\n      this.explode();\n    } else if (this.isFullyFlaggedCell(cellIndex)) {\n      this.clickAllNeighbors(cellIndex);\n    }\n    this.mineCount = this.calculateMineCount();\n    const gameState = this.calculateGameState();\n    this.cleanUpGameIfNecessary(gameState);\n    return gameState;\n  }\n\n  /**\n   * Perform right click actions (flag, question, click neighbors) on the\n   * cell at cellIndex and return the new GameState\n   * @param cellIndex the cell right clicked\n   * @returns the new GameState of the game after the action is complete\n   */\n  public rightClick(cellIndex: CellIndex): GameState {\n    const cell = this.getCell(cellIndex);\n    if (unclickedStates.includes(cell.cellState)) {\n      cell.rightClick();\n    } else if (this.isFullyFlaggedCell(cellIndex)) {\n      this.clickAllNeighbors(cellIndex);\n    }\n    this.mineCount = this.calculateMineCount();\n    const gameState = this.calculateGameState();\n    this.cleanUpGameIfNecessary(gameState);\n    return gameState;\n  }\n\n  /**\n   * Calculate the current GameState of the board\n   */\n  protected calculateGameState(): GameState {\n    let stateCounts = this.getStateCounts();\n    if (!!stateCounts[CellState.ClickedMine]) {\n      return GameState.Lost;\n    } else if (\n      (stateCounts[CellState.Unclicked] || 0) +\n        (stateCounts[CellState.Flagged] || 0) +\n        (stateCounts[CellState.Questioned] || 0) ===\n      0\n    ) {\n      return GameState.Won;\n    }\n    return GameState.Active;\n  }\n\n  /**\n   * Calculate the mine count to display in the UI\n   * @returns A count of the total mines minus flagged cells\n   */\n  protected calculateMineCount(): number {\n    let count = this.mines;\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        if (flaggedStates.includes(this.getCellState({ row, column }))) {\n          count -= 1;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Get a map of counts of CellState for every cell on the board\n   */\n  protected getStateCounts(): { [key in CellState]?: number } {\n    let stateCounts: { [key in CellState]?: number } = {};\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        let cellState = this.getCellState({ row, column });\n        stateCounts[cellState] = (stateCounts[cellState] || 0) + 1;\n      }\n    }\n    return stateCounts;\n  }\n\n  /**\n   * Perform a left click on all neighbors of the cell at cellIndex\n   */\n  protected clickAllNeighbors(cellIndex: CellIndex) {\n    this.getInBoundNeighbors(cellIndex).forEach((neighbor) => {\n      if (this.getCellState(neighbor) === CellState.UnclickedMine) {\n        this.explode();\n      } else {\n        this.floodfill(neighbor);\n      }\n    });\n  }\n\n  /**\n   * Calculate the count of the number of adjacent mines in the 8 neighbors of the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns a count of neighbors containing mines\n   */\n  public getCellNumNeighborMines(cellIndex: CellIndex): number {\n    if (!this.isCellInBounds(cellIndex)) return 0;\n    return this.getInBoundNeighbors(cellIndex)\n      .map((neighbor) => this.isMineCell(neighbor))\n      .filter(Boolean).length;\n  }\n\n  /**\n   * Calculate the count of the number of adjacent flagged cells in the 8 neighbors of the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns a count of flagged neighbors\n   */\n  public getCellNumNeighborFlags(cellIndex: CellIndex): number {\n    if (!this.isCellInBounds(cellIndex)) return 0;\n    return this.getInBoundNeighbors(cellIndex)\n      .map((neighbor) => this.isFlaggedCell(neighbor))\n      .filter(Boolean).length;\n  }\n\n  /**\n   * Get the current Cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the Cell at board[row][column]\n   */\n  public getCell(cellIndex: CellIndex): Cell {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column];\n  }\n\n  /**\n   * Get the current CellState for the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the current CellState for the cell at board[row][column]\n   */\n  public getCellState(cellIndex: CellIndex): CellState {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column].cellState;\n  }\n\n  /**\n   * Depth first search floodfill of open unclicked areas\n   */\n  protected floodfill(cellIndex: CellIndex) {\n    let cellState = this.getCellState(cellIndex);\n    if (cellState === CellState.Unclicked) {\n      this.getCell(cellIndex).click();\n      if (this.getCellNumNeighborMines(cellIndex) === 0) {\n        this.getInBoundNeighbors(cellIndex).forEach((neighbor) => {\n          this.floodfill(neighbor);\n        });\n      }\n    }\n  }\n\n  /**\n   * Mark all bombs as clicked\n   */\n  protected explode() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        if (this.isMineCell({ row, column })) {\n          this.board[row][column].click();\n        }\n      }\n    }\n  }\n\n  /**\n   * Get all neighbors of the cell at cellIndex that are in the board\n   */\n  protected getInBoundNeighbors(cellIndex: CellIndex): CellIndex[] {\n    let inBoundsNeighbors: CellIndex[] = [];\n    neighborOffsets.forEach((offset) => {\n      let neighbor: CellIndex = { row: cellIndex.row + offset.row, column: cellIndex.column + offset.column };\n      if (this.isCellInBounds(neighbor)) {\n        inBoundsNeighbors.push(neighbor);\n      }\n    });\n    return inBoundsNeighbors;\n  }\n\n  /**\n   * Return true if the cell at cellIndex is in board\n   */\n  protected isCellInBounds(cellIndex: CellIndex): boolean {\n    if (cellIndex.row < 0 || cellIndex.row >= this.rows) return false;\n    if (cellIndex.column < 0 || cellIndex.column >= this.columns) return false;\n    return true;\n  }\n\n  /**\n   * Instantiate the internal Board object for storing board state\n   */\n  protected createInternalBoard(mines: number): Cell[][] {\n    let board = Array(this.rows);\n    for (let row = 0; row < this.rows; row++) {\n      board[row] = Array(this.columns);\n      for (let column = 0; column < this.columns; column++) {\n        board[row][column] = new Cell();\n      }\n    }\n    return board;\n  }\n\n  /**\n   * Add numMines mines to the game board without exceeding the maximum\n   */\n  protected addMines(numMines: number) {\n    const maxMines = (this.rows * this.columns) / 2;\n    let addedMines = 0;\n    while (addedMines < numMines && this.mines < maxMines) {\n      let row = this.getRandomInt(this.rows);\n      let column = this.getRandomInt(this.columns);\n      if (this.isUnclickedNonMineCell({ row, column })) {\n        this.board[row][column].isMine = true;\n        addedMines++;\n        this.mines++;\n      }\n    }\n  }\n\n  protected isMineCell(cellIndex: CellIndex) {\n    return mineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isUnclickedNonMineCell(cellIndex: CellIndex) {\n    return unclickedNonMineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isFlaggedCell(cellIndex: CellIndex) {\n    return flaggedStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isFullyFlaggedCell(cellIndex: CellIndex) {\n    return (\n      this.getCellState(cellIndex) === CellState.Clicked &&\n      this.getCellNumNeighborFlags(cellIndex) === this.getCellNumNeighborMines(cellIndex)\n    );\n  }\n\n  /**\n   * Flags all mines at the end of a winning game\n   * @param gameState the current GameState\n   */\n  protected cleanUpGameIfNecessary(gameState: GameState) {\n    if (gameState === GameState.Won) {\n      for (let row = 0; row < this.rows; row++) {\n        for (let column = 0; column < this.columns; column++) {\n          if (this.getCellState({ row, column }) === CellState.QuestionedMine) {\n            this.rightClick({ row, column });\n          }\n          if (this.getCellState({ row, column }) === CellState.UnclickedMine) {\n            this.rightClick({ row, column });\n          }\n        }\n      }\n    }\n  }\n\n  protected validateInputs(rows: number, columns: number, mines: number): void {\n    const maxMines = (rows * columns) / 2;\n    if (mines < 0 || mines > maxMines) {\n      throw Error(`Please provide a number of mines between 0 and ${maxMines}`);\n    }\n    if (rows <= 0 || rows > 100) {\n      throw Error(\"Please provide a number of rows between 1 and 100\");\n    }\n    if (columns <= 0 || columns > 100) {\n      throw Error(\"Please provide a number of columns between 1 and 100\");\n    }\n  }\n\n  protected getRandomInt(max: number) {\n    const num = Math.floor(Math.random() * max);\n    if (num > max) {\n      return max;\n    }\n    return num;\n  }\n\n  public allCells(): Array<Cell> {\n    let arr: Array<Cell> = [];\n    for (let row = 0; row < this.rows; row++) {\n      arr = arr.concat(this.board[row]);\n    }\n    return arr;\n  }\n}\n","import * as _ from \"lodash\";\nimport { Board, CellIndex } from \"./Board\";\nimport { Cell } from \"./Cell\";\nimport { GameState } from \"./GameState\";\n\nexport class Game {\n  public board: Board;\n  protected _gameState: GameState = GameState.Idle;\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.board = new Board(rows, columns, mines);\n  }\n\n  get gameState(): GameState {\n    return this._gameState;\n  }\n\n  /**\n   * Perform left click actions (click and click neighbors) on the\n   * cell at cellIndex and return a deep copy of the game in its new state\n   * @param cellIndex the cell left clicked\n   * @returns a deep copy of the game in its new state\n   */\n  click(cellIndex: CellIndex): Game {\n    if (this._gameState === GameState.Won || this._gameState === GameState.Lost) {\n      return this;\n    }\n    this._gameState = this.board.click(cellIndex);\n    return _.cloneDeep(this);\n  }\n\n  /**\n   * Perform right click actions (flag, question and click neighbors) on the\n   * cell at cellIndex and return a deep copy of the game in its new state\n   * @param cellIndex the cell right clicked\n   * @returns a deep copy of the game in its new state\n   */\n  rightClick(cellIndex: CellIndex): Game {\n    if (this._gameState === GameState.Won || this._gameState === GameState.Lost) {\n      return this;\n    }\n    this._gameState = this.board.rightClick(cellIndex);\n    return _.cloneDeep(this);\n  }\n}\n\nexport function deserializeGame(json: any): Game {\n  var instance = new Game(10, 10, 10); // NOTE: if your constructor checks for unpassed arguments, then just pass dummy ones to prevent throwing an error\n  Object.assign(instance, json);\n  for (let row = 0; row < instance.board.rows; row++) {\n    for (let column = 0; column < instance.board.columns; column++) {\n      let cell = new Cell();\n      Object.assign(cell, json.board.board[row][column]);\n      json.board.board[row][column] = cell;\n    }\n  }\n  instance.board = new Board(10, 10, 10);\n  Object.assign(instance.board, json.board);\n  return instance;\n}\n","import \"./GameCell.css\";\nimport { CellState, unclickedStates } from \"../../../engine/Cell\";\n\ntype GameCellProps = {\n  cellState: CellState;\n  numNeighborMines: number;\n};\n\nfunction GameCell({ cellState, numNeighborMines }: GameCellProps) {\n  const getContent = (): string => {\n    if (cellState === CellState.Clicked) {\n      if (numNeighborMines > 0) {\n        return String(numNeighborMines);\n      }\n    }\n    if (cellState === CellState.ClickedMine) {\n      return \"💣\";\n    }\n    if (cellState === CellState.Flagged || cellState === CellState.FlaggedMine) {\n      return \"🚩\";\n    }\n    if (cellState === CellState.Questioned || cellState === CellState.QuestionedMine) {\n      return \"❓\";\n    }\n    return \"\";\n  };\n\n  const getClass = (): string => {\n    if (unclickedStates.includes(cellState)) {\n      return \"unclicked\";\n    } else if (cellState === CellState.Clicked) {\n      return \"clicked\";\n    } else if (cellState === CellState.ClickedMine) {\n      return \"clicked-mine\";\n    }\n\n    return \"\";\n  };\n\n  return <div className={`GameCell ${getClass()}`}>{getContent()}</div>;\n}\n\nexport default GameCell;\n","import \"./GameBoard.css\";\nimport { Board, CellIndex } from \"../../../engine/Board\";\nimport { Cell } from \"../../../engine/Cell\";\nimport GameCell from \"../GameCell/GameCell\";\n\ntype GameBoardProps = {\n  gameBoard: Board;\n  onCellClick: (e: React.MouseEvent<HTMLDivElement>, cellIndex: CellIndex) => void;\n};\n\nfunction GameBoard({ gameBoard, onCellClick }: GameBoardProps) {\n  return (\n    <div className=\"GameBoard\" id=\"game-board\" data-testid=\"game-board\">\n      {gameBoard.board.map((row: Cell[], rowNumber: number) => (\n        <div className=\"Row\" key={rowNumber}>\n          {row.map((cell: Cell, columnNumber: number) => (\n            <div\n              className=\"Cell\"\n              key={columnNumber}\n              onClick={(e: React.MouseEvent<HTMLDivElement>) =>\n                onCellClick(e, { row: rowNumber, column: columnNumber })\n              }\n              onContextMenu={(e: React.MouseEvent<HTMLDivElement>) =>\n                onCellClick(e, { row: rowNumber, column: columnNumber })\n              }\n            >\n              {\n                <GameCell\n                  cellState={gameBoard.getCellState({ row: rowNumber, column: columnNumber })}\n                  numNeighborMines={gameBoard.getCellNumNeighborMines({ row: rowNumber, column: columnNumber })}\n                />\n              }\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import \"./GameTimer.css\";\nimport { GameState } from \"../../../engine/GameState\";\nimport { useEffect, useRef, useState } from \"react\";\n\ntype GameTimerProps = {\n  gameState: GameState;\n};\n\n/**\n * An effect used to keep and update state for the game timer\n * @param increment callback to increment the timer\n * @param clear callback to reset the counter to zero\n * @param gameState the current GameState\n */\nfunction useTimer(increment: Function, clear: Function, gameState: GameState) {\n  const savedIncrement = useRef<Function>();\n  const savedClear = useRef<Function>();\n  let interval = useRef<NodeJS.Timer>();\n\n  function tick() {\n    savedIncrement.current && savedIncrement.current();\n  }\n\n  useEffect(() => {\n    savedIncrement.current = increment;\n    savedClear.current = clear;\n  });\n\n  useEffect(() => {\n    if (gameState === GameState.Active) {\n      interval.current = setInterval(tick, 1000);\n    } else if (\n      (gameState === GameState.Lost || gameState === GameState.Won || gameState === GameState.Idle) &&\n      interval.current !== undefined\n    ) {\n      clearInterval(interval.current);\n      if (gameState === GameState.Idle) {\n        savedClear.current && savedClear.current(0); // Going Idle implies the game was reset\n      }\n    }\n  }, [gameState]);\n}\n\nfunction GameCell({ gameState }: GameTimerProps) {\n  const [timer, setTimer] = useState(0);\n\n  useTimer(\n    () => setTimer(timer + 1),\n    () => setTimer(0),\n    gameState\n  );\n\n  return <div>{timer}</div>;\n}\n\nexport default GameCell;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { CellIndex } from \"../engine/Board\";\nimport { Game } from \"../engine/Game\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameTimer from \"./components/GameTimer/GameTimer\";\n\ndocument.addEventListener(\"contextmenu\", (event) => {\n  event.preventDefault();\n});\n\nfunction App() {\n  const rows = 20;\n  const columns = 20;\n  const mines = 50;\n\n  const [game, setGame] = useState(new Game(rows, columns, mines));\n\n  let onCellClick = (e: React.MouseEvent<HTMLDivElement>, clickedIndex: CellIndex) => {\n    if (e.type === \"click\") {\n      const newGame = game.click(clickedIndex);\n      setGame(newGame);\n    } else if (e.type === \"contextmenu\") {\n      const newGame = game.rightClick(clickedIndex);\n      setGame(newGame);\n    }\n  };\n\n  let reset = () => {\n    setGame(new Game(rows, columns, mines));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={reset}>Reset</button>\n        <div className=\"header-numbers\">\n          <GameTimer gameState={game.gameState} />\n          {game.board.mineCount}\n        </div>\n        <GameBoard gameBoard={game.board} onCellClick={onCellClick} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useRef, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\n\nimport \"./CoopBoard.css\";\n\nimport GameBoard from \"../GameBoard/GameBoard\";\nimport GameTimer from \"../GameTimer/GameTimer\";\nimport { CellIndex } from \"../../../engine/Board\";\nimport { deserializeGame, Game } from \"../../../engine/Game\";\n\ndocument.addEventListener(\"contextmenu\", (event) => {\n  event.preventDefault();\n});\n\nfunction App() {\n  const socket = useRef<Socket>();\n\n  useEffect(() => {\n    socket.current = io();\n    socket.current.on(\"setGame\", (game) => {\n      setGame(deserializeGame(game));\n    });\n  }, []);\n\n  const [game, setGame] = useState<Game>();\n\n  let onCellClick = (e: React.MouseEvent<HTMLDivElement>, clickedIndex: CellIndex) => {\n    if (e.type === \"click\") {\n      socket.current && socket.current.emit(\"click\", clickedIndex);\n    } else if (e.type === \"contextmenu\") {\n      socket.current && socket.current.emit(\"rightClick\", clickedIndex);\n    }\n  };\n\n  let reset = () => {\n    socket.current && socket.current.emit(\"resetGame\");\n  };\n\n  return (\n    <div className=\"App\">\n      {!!game && (\n        <header className=\"App-header\">\n          <button onClick={reset}>Reset</button>\n\n          <div className=\"header-numbers\">\n            <GameTimer gameState={game.gameState} />\n            {game.board.mineCount}\n          </div>\n          <GameBoard gameBoard={game.board} onCellClick={onCellClick} />\n        </header>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport \"./client/index.css\";\nimport App from \"./client/App\";\nimport reportWebVitals from \"./client/reportWebVitals\";\nimport CoopBoard from \"./client/components/CoopBoard/CoopBoard\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"coop\" element={<CoopBoard />} />\n      </Routes>\n    </BrowserRouter>\n    ,\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}