{"version":3,"sources":["engine/Board.ts","GameCell/GameCell.tsx","GameBoard/GameBoard.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CellState","nonMineStates","Unclicked","Clicked","mineStates","UnclickedMine","ClickedMine","unclickedStates","unclickedNonMineStates","clickedStates","neighborOffsets","row","column","Board","rows","columns","mines","board","this","validateInputs","createInternalBoard","addMines","cellIndex","cellState","getCellState","includes","floodfill","explode","_","cloneDeep","isCellInBounds","getInBoundNeighbors","map","neighbor","isMineCell","filter","Boolean","length","Error","getCellNumNeighborMines","forEach","inBoundsNeighbors","offset","push","Array","maxMines","addedMines","getRandomInt","isUnclickedNonMineCell","max","Math","floor","random","GameCell","numNeighborMines","className","String","GameBoard","gameBoard","onCellClick","id","rowNumber","cell","columnNumber","onClick","App","useState","setGameBoard","clickedIndex","newBoard","click","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9424bd38.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport chunk from \"lodash/chunk\";\n\nexport enum CellState {\n  Unclicked,\n  Clicked,\n  UnclickedMine,\n  ClickedMine,\n}\nexport const nonMineStates = [CellState.Unclicked, CellState.Clicked];\nexport const mineStates = [CellState.UnclickedMine, CellState.ClickedMine];\nexport const unclickedStates = [CellState.Unclicked, CellState.UnclickedMine];\nexport const unclickedNonMineStates = [CellState.Unclicked];\nexport const clickedStates = [CellState.Clicked, CellState.ClickedMine];\n\nconst neighborOffsets = [\n  { row: 0, column: 1 },\n  { row: 1, column: 0 },\n  { row: 0, column: -1 },\n  { row: -1, column: 0 },\n  { row: 1, column: 1 },\n  { row: -1, column: -1 },\n  { row: 1, column: -1 },\n  { row: -1, column: 1 },\n];\n\nexport type CellIndex = {\n  row: number;\n  column: number;\n};\n\nexport default class Board {\n  public rows: number;\n  public columns: number;\n  public mines: number;\n  public board: number[][];\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.validateInputs(rows, columns, mines);\n    this.rows = rows;\n    this.columns = columns;\n    this.mines = 0; // Initialize to 0 because we will increment as each mine is added\n    this.board = this.createInternalBoard(mines);\n    this.addMines(mines);\n  }\n\n  public size(): number {\n    return this.rows * this.columns;\n  }\n\n  public click(cellIndex: CellIndex): Board {\n    let cellState = this.getCellState(cellIndex);\n    if (clickedStates.includes(cellState)) return this;\n    if (cellState === CellState.Unclicked) {\n      this.floodfill(cellIndex);\n    }\n    if (cellState === CellState.UnclickedMine) {\n      this.explode();\n      return _.cloneDeep(this);\n    }\n    return _.cloneDeep(this);\n  }\n\n  /**\n   * Calculate the count of the number of adjacent mines in the 8 neighbors of the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns a count of neighbors containing mines\n   */\n  public getCellNumNeighborMines(cellIndex: CellIndex): number {\n    if (!this.isCellInBounds(cellIndex)) return 0;\n    return this.getInBoundNeighbors(cellIndex)\n      .map((neighbor) => this.isMineCell(neighbor))\n      .filter(Boolean).length;\n  }\n\n  /**\n   * Get the current CellState for the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the current CellState for the cell at board[row][column]\n   */\n  public getCellState(cellIndex: CellIndex): CellState {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column];\n  }\n\n  /**\n   * Depth first search floodfill of open unclicked areas\n   */\n  protected floodfill(cellIndex: CellIndex) {\n    let cellState = this.getCellState(cellIndex);\n    if (cellState === CellState.Unclicked) {\n      this.board[cellIndex.row][cellIndex.column] = CellState.Clicked;\n      if (this.getCellNumNeighborMines(cellIndex) === 0) {\n        this.getInBoundNeighbors(cellIndex).forEach((neighbor) => {\n          this.floodfill(neighbor);\n        });\n      }\n    }\n  }\n\n  /**\n   * Mark all bombs as clicked\n   */\n  protected explode() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        if (this.isMineCell({ row, column })) {\n          this.board[row][column] = CellState.ClickedMine;\n        }\n      }\n    }\n  }\n\n  protected getInBoundNeighbors(cellIndex: CellIndex): CellIndex[] {\n    let inBoundsNeighbors: CellIndex[] = [];\n    neighborOffsets.forEach((offset) => {\n      let neighbor: CellIndex = { row: cellIndex.row + offset.row, column: cellIndex.column + offset.column };\n      if (this.isCellInBounds(neighbor)) {\n        inBoundsNeighbors.push(neighbor);\n      }\n    });\n    return inBoundsNeighbors;\n  }\n\n  protected isCellInBounds(cellIndex: CellIndex): boolean {\n    if (cellIndex.row < 0 || cellIndex.row >= this.rows) return false;\n    if (cellIndex.column < 0 || cellIndex.column >= this.columns) return false;\n    return true;\n  }\n\n  protected createInternalBoard(mines: number): CellState[][] {\n    let board = Array(this.rows);\n    for (let row = 0; row < this.rows; row++) {\n      board[row] = Array(this.columns);\n      for (let column = 0; column < this.columns; column++) {\n        board[row][column] = CellState.Unclicked;\n      }\n    }\n    return board;\n  }\n\n  protected addMines(mines: number) {\n    const maxMines = (this.rows * this.columns) / 2;\n    let addedMines = 0;\n    while (addedMines < mines && this.mines < maxMines) {\n      let row = this.getRandomInt(this.rows);\n      let column = this.getRandomInt(this.columns);\n      if (this.isUnclickedNonMineCell({ row, column })) {\n        this.board[row][column] = CellState.UnclickedMine;\n        addedMines++;\n        this.mines++;\n      }\n    }\n  }\n\n  protected isMineCell(cellIndex: CellIndex) {\n    return mineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isUnclickedNonMineCell(cellIndex: CellIndex) {\n    return unclickedNonMineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isNonMineCell(cellIndex: CellIndex) {\n    return nonMineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected validateInputs(rows: number, columns: number, mines: number): void {\n    const maxMines = (rows * columns) / 2;\n    if (mines < 0 || mines > maxMines) {\n      throw Error(`Please provide a number of mines between 0 and ${maxMines}`);\n    }\n    if (rows <= 0 || rows > 100) {\n      throw Error(\"Please provide a number of rows between 1 and 100\");\n    }\n    if (columns <= 0 || columns > 100) {\n      throw Error(\"Please provide a number of columns between 1 and 100\");\n    }\n  }\n\n  protected getRandomInt(max: number) {\n    return Math.floor(Math.random() * (max - 1));\n  }\n}\n","import \"./GameCell.css\";\nimport Board, { CellIndex, CellState, clickedStates, nonMineStates, unclickedStates } from \"../engine/Board\";\n\ntype GameCellProps = {\n  cellState: CellState;\n  numNeighborMines: number;\n};\n\nfunction GameCell({cellState, numNeighborMines}: GameCellProps) {\n  const getContent = (): string => {\n    if (cellState === CellState.Clicked) {\n      if (numNeighborMines > 0){\n        return String(numNeighborMines)\n      }\n    }\n    if (cellState === CellState.ClickedMine) {\n      return \"💣\"\n    }\n    return \"\"\n  }\n\n  const getClass = (): string => {\n    if (unclickedStates.includes(cellState)){\n      return \"unclicked\"\n    } else if (cellState === CellState.Clicked) {\n      return \"clicked\"\n    } else if (cellState === CellState.ClickedMine) {\n      return \"clicked-mine\"\n    }\n\n    return \"\"\n  }\n\n  return <div className={`GameCell ${getClass()}`}>\n    {getContent()}\n  </div>\n}\n\nexport default GameCell;\n","import \"./GameBoard.css\";\nimport Board, { CellIndex, CellState } from \"../engine/Board\";\nimport GameCell from \"../GameCell/GameCell\";\n\ntype GameBoardProps = {\n  gameBoard: Board;\n  onCellClick: (cellIndex: CellIndex) => void;\n};\n\n\nfunction GameBoard({ gameBoard, onCellClick }: GameBoardProps) {\n  return <div className=\"GameBoard\" id=\"board\">\n    {gameBoard.board.map((row: CellState[], rowNumber: number) => (\n      <div className=\"Row\" key={rowNumber}>\n        {row.map((cell: CellState, columnNumber: number) => (\n          <div className=\"Cell\" key={columnNumber} onClick={() => onCellClick({row: rowNumber, column: columnNumber})}>\n            {<GameCell \n            cellState={gameBoard.getCellState({row: rowNumber, column: columnNumber})}\n            numNeighborMines={gameBoard.getCellNumNeighborMines({row: rowNumber, column: columnNumber})}/>}\n          </div>\n        ))}\n      </div>\n    ))}\n  </div>\n}\n\nexport default GameBoard;\n","import './App.css';\nimport Board, { CellIndex } from \"./engine/Board\";\nimport GameBoard from \"./GameBoard/GameBoard\"\nimport { useState } from 'react';\n\nfunction App() {\n  const [gameBoard, setGameBoard] = useState(new Board(20, 20, 50));\n\n  let onCellClick = (clickedIndex: CellIndex) => {\n    const newBoard = gameBoard.click(clickedIndex)\n    console.log(newBoard.board)\n    setGameBoard(newBoard)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GameBoard gameBoard={gameBoard} onCellClick={onCellClick}/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}