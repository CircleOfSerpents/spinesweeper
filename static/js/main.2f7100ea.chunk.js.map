{"version":3,"sources":["engine/Cell.ts","engine/Board.ts","GameCell/GameCell.tsx","GameBoard/GameBoard.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["CellState","Unclicked","Clicked","Flagged","Questioned","mineStates","UnclickedMine","ClickedMine","FlaggedMine","QuestionedMine","unclickedStates","flaggedStates","unclickedNonMineStates","Cell","_isClicked","_isMine","_isFlagged","_isQuestioned","this","isMine","neighborOffsets","row","column","Board","rows","columns","mines","board","validateInputs","createInternalBoard","addMines","cellIndex","cellState","getCellState","floodfill","explode","isFullyFlaggedCell","clickAllNeighbors","_","cloneDeep","cell","getCell","includes","rightClick","getInBoundNeighbors","forEach","neighbor","isCellInBounds","map","isMineCell","filter","Boolean","length","isFlaggedCell","Error","click","getCellNumNeighborMines","inBoundsNeighbors","offset","push","Array","maxMines","addedMines","getRandomInt","isUnclickedNonMineCell","getCellNumNeighborFlags","max","Math","floor","random","GameCell","numNeighborMines","className","String","GameBoard","gameBoard","onCellClick","id","rowNumber","columnNumber","onClick","e","onContextMenu","document","addEventListener","event","preventDefault","App","useState","setGameBoard","clickedIndex","type","newBoard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f7100ea.chunk.js","sourcesContent":["export enum CellState {\n  Unclicked,\n  Clicked,\n  Flagged,\n  Questioned,\n  UnclickedMine,\n  ClickedMine,\n  FlaggedMine,\n  QuestionedMine,\n  Invalid,\n}\n\nexport const nonMineStates = [CellState.Unclicked, CellState.Clicked, CellState.Flagged, CellState.Questioned];\nexport const mineStates = [\n  CellState.UnclickedMine,\n  CellState.ClickedMine,\n  CellState.FlaggedMine,\n  CellState.QuestionedMine,\n];\nexport const unclickedStates = [\n  CellState.Unclicked,\n  CellState.UnclickedMine,\n  CellState.Flagged,\n  CellState.FlaggedMine,\n  CellState.Questioned,\n  CellState.QuestionedMine,\n];\nexport const flaggedStates = [CellState.Flagged, CellState.FlaggedMine];\nexport const unclickedNonMineStates = [CellState.Unclicked, CellState.Flagged, CellState.Questioned];\nexport const clickedStates = [CellState.Clicked, CellState.ClickedMine];\n\nexport default class Cell {\n  private _isClicked: boolean = false;\n  private _isMine: boolean = false;\n  private _isFlagged: boolean = false;\n  private _isQuestioned: boolean = false;\n\n  public get cellState(): CellState {\n    if (this._isClicked) {\n      if (this._isMine) {\n        return CellState.ClickedMine;\n      } else {\n        return CellState.Clicked;\n      }\n    } else {\n      if (this._isMine) {\n        if (this._isFlagged) {\n          return CellState.FlaggedMine;\n        } else if (this._isQuestioned) {\n          return CellState.QuestionedMine;\n        } else {\n          return CellState.UnclickedMine;\n        }\n      } else {\n        if (this._isFlagged) {\n          return CellState.Flagged;\n        } else if (this._isQuestioned) {\n          return CellState.Questioned;\n        } else {\n          return CellState.Unclicked;\n        }\n      }\n    }\n  }\n\n  public click() {\n    if (this._isFlagged || this._isQuestioned) return;\n    this._isClicked = true;\n  }\n\n  public rightClick() {\n    if (this._isClicked) return;\n    if (this._isFlagged) {\n      this._isFlagged = false;\n      this._isQuestioned = true;\n    } else if (this._isQuestioned) {\n      this._isQuestioned = false;\n    } else {\n      this._isFlagged = true;\n    }\n  }\n\n  public set isMine(isMine: boolean) {\n    this._isMine = isMine;\n  }\n}\n","import _ from \"lodash\";\nimport Cell, { CellState, flaggedStates, mineStates, unclickedNonMineStates, unclickedStates } from \"./Cell\";\n\nconst neighborOffsets = [\n  { row: 0, column: 1 },\n  { row: 1, column: 0 },\n  { row: 0, column: -1 },\n  { row: -1, column: 0 },\n  { row: 1, column: 1 },\n  { row: -1, column: -1 },\n  { row: 1, column: -1 },\n  { row: -1, column: 1 },\n];\n\nexport type CellIndex = {\n  row: number;\n  column: number;\n};\n\nexport default class Board {\n  public rows: number;\n  public columns: number;\n  public mines: number;\n  public board: Cell[][];\n\n  constructor(rows: number, columns: number, mines: number) {\n    this.validateInputs(rows, columns, mines);\n    this.rows = rows;\n    this.columns = columns;\n    this.mines = 0; // Initialize to 0 because we will increment as each mine is added\n    this.board = this.createInternalBoard(mines);\n    this.addMines(mines);\n  }\n\n  public size(): number {\n    return this.rows * this.columns;\n  }\n\n  public click(cellIndex: CellIndex): Board {\n    let cellState = this.getCellState(cellIndex);\n    if (cellState === CellState.Unclicked) {\n      this.floodfill(cellIndex);\n    } else if (cellState === CellState.UnclickedMine) {\n      this.explode();\n    } else if (this.isFullyFlaggedCell(cellIndex)) {\n      this.clickAllNeighbors(cellIndex);\n    }\n    return _.cloneDeep(this);\n  }\n\n  public rightClick(cellIndex: CellIndex): Board {\n    let cell = this.getCell(cellIndex);\n    if (unclickedStates.includes(cell.cellState)) {\n      cell.rightClick();\n    } else if (this.isFullyFlaggedCell(cellIndex)) {\n      this.clickAllNeighbors(cellIndex);\n    }\n    return _.cloneDeep(this);\n  }\n\n  protected clickAllNeighbors(cellIndex: CellIndex) {\n    // Click all neighbors\n    this.getInBoundNeighbors(cellIndex).forEach((neighbor) => {\n      if (this.getCellState(neighbor) === CellState.UnclickedMine) {\n        this.explode();\n      } else {\n        this.floodfill(neighbor);\n      }\n    });\n  }\n\n  /**\n   * Calculate the count of the number of adjacent mines in the 8 neighbors of the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns a count of neighbors containing mines\n   */\n  public getCellNumNeighborMines(cellIndex: CellIndex): number {\n    if (!this.isCellInBounds(cellIndex)) return 0;\n    return this.getInBoundNeighbors(cellIndex)\n      .map((neighbor) => this.isMineCell(neighbor))\n      .filter(Boolean).length;\n  }\n\n  /**\n   * Calculate the count of the number of adjacent flagged cells in the 8 neighbors of the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns a count of flagged neighbors\n   */\n  public getCellNumNeighborFlags(cellIndex: CellIndex): number {\n    if (!this.isCellInBounds(cellIndex)) return 0;\n    return this.getInBoundNeighbors(cellIndex)\n      .map((neighbor) => this.isFlaggedCell(neighbor))\n      .filter(Boolean).length;\n  }\n\n  /**\n   * Get the current Cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the Cell at board[row][column]\n   */\n  public getCell(cellIndex: CellIndex): Cell {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column];\n  }\n\n  /**\n   * Get the current CellState for the cell at board[row][column]\n   * @param row the row of the cell\n   * @param column the column of the cell\n   * @returns the current CellState for the cell at board[row][column]\n   */\n  public getCellState(cellIndex: CellIndex): CellState {\n    if (!this.isCellInBounds(cellIndex)) {\n      throw Error(\"Cell out of bounds\");\n    }\n    return this.board[cellIndex.row][cellIndex.column].cellState;\n  }\n\n  /**\n   * Depth first search floodfill of open unclicked areas\n   */\n  protected floodfill(cellIndex: CellIndex) {\n    let cellState = this.getCellState(cellIndex);\n    if (cellState === CellState.Unclicked) {\n      this.getCell(cellIndex).click();\n      if (this.getCellNumNeighborMines(cellIndex) === 0) {\n        this.getInBoundNeighbors(cellIndex).forEach((neighbor) => {\n          this.floodfill(neighbor);\n        });\n      }\n    }\n  }\n\n  /**\n   * Mark all bombs as clicked\n   */\n  protected explode() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        if (this.isMineCell({ row, column })) {\n          this.board[row][column].click();\n        }\n      }\n    }\n  }\n\n  protected getInBoundNeighbors(cellIndex: CellIndex): CellIndex[] {\n    let inBoundsNeighbors: CellIndex[] = [];\n    neighborOffsets.forEach((offset) => {\n      let neighbor: CellIndex = { row: cellIndex.row + offset.row, column: cellIndex.column + offset.column };\n      if (this.isCellInBounds(neighbor)) {\n        inBoundsNeighbors.push(neighbor);\n      }\n    });\n    return inBoundsNeighbors;\n  }\n\n  protected isCellInBounds(cellIndex: CellIndex): boolean {\n    if (cellIndex.row < 0 || cellIndex.row >= this.rows) return false;\n    if (cellIndex.column < 0 || cellIndex.column >= this.columns) return false;\n    return true;\n  }\n\n  protected createInternalBoard(mines: number): Cell[][] {\n    let board = Array(this.rows);\n    for (let row = 0; row < this.rows; row++) {\n      board[row] = Array(this.columns);\n      for (let column = 0; column < this.columns; column++) {\n        board[row][column] = new Cell();\n      }\n    }\n    return board;\n  }\n\n  protected addMines(mines: number) {\n    const maxMines = (this.rows * this.columns) / 2;\n    let addedMines = 0;\n    while (addedMines < mines && this.mines < maxMines) {\n      let row = this.getRandomInt(this.rows);\n      let column = this.getRandomInt(this.columns);\n      if (this.isUnclickedNonMineCell({ row, column })) {\n        this.board[row][column].isMine = true;\n        addedMines++;\n        this.mines++;\n      }\n    }\n  }\n\n  protected isMineCell(cellIndex: CellIndex) {\n    return mineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isUnclickedNonMineCell(cellIndex: CellIndex) {\n    return unclickedNonMineStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isFlaggedCell(cellIndex: CellIndex) {\n    return flaggedStates.includes(this.getCellState(cellIndex));\n  }\n\n  protected isFullyFlaggedCell(cellIndex: CellIndex) {\n    return (\n      this.getCellState(cellIndex) === CellState.Clicked &&\n      this.getCellNumNeighborFlags(cellIndex) === this.getCellNumNeighborMines(cellIndex)\n    );\n  }\n\n  protected validateInputs(rows: number, columns: number, mines: number): void {\n    const maxMines = (rows * columns) / 2;\n    if (mines < 0 || mines > maxMines) {\n      throw Error(`Please provide a number of mines between 0 and ${maxMines}`);\n    }\n    if (rows <= 0 || rows > 100) {\n      throw Error(\"Please provide a number of rows between 1 and 100\");\n    }\n    if (columns <= 0 || columns > 100) {\n      throw Error(\"Please provide a number of columns between 1 and 100\");\n    }\n  }\n\n  protected getRandomInt(max: number) {\n    return Math.floor(Math.random() * (max - 1));\n  }\n}\n","import \"./GameCell.css\";\nimport { CellState, unclickedStates } from \"../engine/Cell\";\n\ntype GameCellProps = {\n  cellState: CellState;\n  numNeighborMines: number;\n};\n\nfunction GameCell({ cellState, numNeighborMines }: GameCellProps) {\n  const getContent = (): string => {\n    if (cellState === CellState.Clicked) {\n      if (numNeighborMines > 0) {\n        return String(numNeighborMines);\n      }\n    }\n    if (cellState === CellState.ClickedMine) {\n      return \"💣\";\n    }\n    if (cellState === CellState.Flagged || cellState === CellState.FlaggedMine) {\n      return \"🚩\";\n    }\n    if (cellState === CellState.Questioned || cellState === CellState.QuestionedMine) {\n      return \"❓\";\n    }\n    return \"\";\n  };\n\n  const getClass = (): string => {\n    if (unclickedStates.includes(cellState)) {\n      return \"unclicked\";\n    } else if (cellState === CellState.Clicked) {\n      return \"clicked\";\n    } else if (cellState === CellState.ClickedMine) {\n      return \"clicked-mine\";\n    }\n\n    return \"\";\n  };\n\n  return <div className={`GameCell ${getClass()}`}>{getContent()}</div>;\n}\n\nexport default GameCell;\n","import \"./GameBoard.css\";\nimport Board, { CellIndex } from \"../engine/Board\";\nimport Cell from \"../engine/Cell\";\nimport GameCell from \"../GameCell/GameCell\";\n\ntype GameBoardProps = {\n  gameBoard: Board;\n  onCellClick: (e: React.MouseEvent<HTMLDivElement>, cellIndex: CellIndex) => void;\n};\n\nfunction GameBoard({ gameBoard, onCellClick }: GameBoardProps) {\n  return (\n    <div className=\"GameBoard\" id=\"board\">\n      {gameBoard.board.map((row: Cell[], rowNumber: number) => (\n        <div className=\"Row\" key={rowNumber}>\n          {row.map((cell: Cell, columnNumber: number) => (\n            <div\n              className=\"Cell\"\n              key={columnNumber}\n              onClick={(e: React.MouseEvent<HTMLDivElement>) =>\n                onCellClick(e, { row: rowNumber, column: columnNumber })\n              }\n              onContextMenu={(e: React.MouseEvent<HTMLDivElement>) =>\n                onCellClick(e, { row: rowNumber, column: columnNumber })\n              }\n            >\n              {\n                <GameCell\n                  cellState={gameBoard.getCellState({ row: rowNumber, column: columnNumber })}\n                  numNeighborMines={gameBoard.getCellNumNeighborMines({ row: rowNumber, column: columnNumber })}\n                />\n              }\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import \"./App.css\";\nimport Board, { CellIndex } from \"./engine/Board\";\nimport GameBoard from \"./GameBoard/GameBoard\";\nimport { useState } from \"react\";\n\ndocument.addEventListener(\"contextmenu\", (event) => {\n  event.preventDefault();\n});\n\nfunction App() {\n  const [gameBoard, setGameBoard] = useState(new Board(20, 20, 50));\n\n  let onCellClick = (e: React.MouseEvent<HTMLDivElement>, clickedIndex: CellIndex) => {\n    if (e.type === \"click\") {\n      const newBoard = gameBoard.click(clickedIndex);\n      setGameBoard(newBoard);\n    } else if (e.type === \"contextmenu\") {\n      const newBoard = gameBoard.rightClick(clickedIndex);\n      setGameBoard(newBoard);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GameBoard gameBoard={gameBoard} onCellClick={onCellClick} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}